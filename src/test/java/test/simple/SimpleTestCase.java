package test.simple;

import org.junit.jupiter.api.*;
import test.base.BaseTests;
import test.simple.myanatation.Smoke;
import test.simple.myanatation.TestOnMac;


import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;


import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.RepeatedTest.LONG_DISPLAY_NAME;

/**
 * –ü—Ä–∏–º–µ—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 */
@DisplayName("Base TestCase Annotation")
public class SimpleTestCase extends BaseTests {

    /**
     * –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç-–∫–µ–π—Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è @Test
     */
    @Test
    void testSimple() {
        System.out.println("testSimple()");
    }

    /**
     * –¢–µ—Å—Ç –∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @DisplayName - –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
     */
    @Test
    @DisplayName("My name is testDisplayName()")
    void testDisplayName() {
        System.out.println("testDisplayName()");
    }

    /**
     * –¢–µ—Å—Ç –∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @DisplayName - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–∏—Å–∞—Ç—å —ç–º–æ–¥–∂–∏ –≤ —Ç–µ—Å—Ç-–∫–µ–π—Å–µ
     */
    @Test
    @DisplayName("üò± -> My name is testWithDisplayNameContainingEmoji()")
    void testWithDisplayNameContainingEmoji() {
        System.out.println("testWithDisplayNameContainingEmoji()");
    }

    /**
     * –¢–µ—Å—Ç –∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Timeout - –∑–∞–¥–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Ç—Å-–∫–µ–π—Å–∞
     */
    @Test
    @Timeout(7)
    @DisplayName("My name is testTimeout()")
    void testTimeout() {
        System.out.println("testTimeout()");
    }

    /**
     * –¢–µ—Å—Ç-–∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Disabled - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ) —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
     */
    @Test
    @DisplayName("My name is testDisabled()")
    @Disabled("The reason for the disabling must always be indicated.")
    void testDisabled() {
        System.out.println("Don't expect results from me. I am disabled. SEE ANNOTATION @DISABLED!!!");
    }

    /**
     * –¢–µ—Å—Ç-–∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Tag - —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
     */
    @Test
    @Tag("Smoke")
    @DisplayName("My name is testWithTag()")
    void testWithTag() {
        System.out.println("testWithTag()");
    }

    /**
     * –¢–µ—Å—Ç-–∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Tags - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
     */
    @Test
    @Tags({
            @Tag("Smoke"),
            @Tag("Regress"),
            @Tag("Tags")
    })
    @DisplayName("My name is testWithTags()")
    void testWithTags() {
        System.out.println("testWithTags()");
    }


    /**
     * –¢–µ—Å—Ç-–∫–µ–π—Å —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @RepeatedTest - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç-–∫–µ–π—Å–∞ n-–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
     */
    @Tag("Repeated")
    @RepeatedTest(name = LONG_DISPLAY_NAME, value = 2)
    void testRepeated() {
        System.out.println("testRepeated()");
    }


    /**
     * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö
     * @param testInfo - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫—Ç–æ—Ä–æ–≥–æ –≤ —Å–∞–º–æ–º —Ç–µ—Å—Ç–µ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
     */
    @Test
    @DisplayName("My name is testWithArgumentMethod(TestInfo testInfo)")
    void testWithArgumentMethod(TestInfo testInfo) {
        System.out.println("testWithArgumentMethod() " + testInfo.getDisplayName());
    }


    /**
     * –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ –¥—Ä—É–≥–∏—Ö
     */
    @TestOnMac
    void testOnMac() {
        // ...
    }

}
